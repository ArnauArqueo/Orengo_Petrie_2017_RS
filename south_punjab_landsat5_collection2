// JavaScript code to be implemented in Google Earth Engine(c) developed by H.A. Orengo
// to accompany the paper:

// Orengo, H.A. and Petrie, C.A. 2017. Large-scale, multi-temporal remote sensing of
// palaeo-river networks: a case study from northwest India and its implications for
// the Indus Civilisation. Remote Sensing, 9(7): 735; doi: 10.3390/rs9070735

//The following is a modification of the original code to accompany the paper: 
//Garcia-Molsosa, A. Orengo H.A. Petrie C.A. 'Reconstructing long-term settlement histories on complex 
//alluvial floodplains: integrating historical map analysis and remote-sensing in the 
//archaeological analysis of the landscape of the Indus River Basin'

//                ------------- ooo -------------

// TO EXECUTE THESE SCRIPTS PASTE THIS CODE INTO GOOGLE EARTH ENGINE CODE EDITOR AND PRESS RUN

//                ------------- ooo -------------

// The different algorithms are written here following the order adopted in the journal article:
// 1. NDVSI (Normalised Difference Vegetation Seasonality Index), line 100
// 2. SMTVI (Seasonal Multi-Temporal Vegetation Indices),         line 150
// 3. Wet Months Multi-Temporal Tasselled Cap Transformation,     line 198
// 4. Dry Months Multi-Temporal Tasselled Cap Transformation,     line 257
// 5. Wet Months Multi-Temporal Principal Component Analysis,     line 308
// 6. Dry Months Multi-Temporal Principal Component Analysis,     line 413

// For more information on how these scripts work and how to apply them refer to the text of the 
// article, which is freely available at: http://www.mdpi.com/2072-4292/9/7/735
// Suggestions and code improvementents are welcome! Please, contact Hector A. Orengo

// NOTES, READ CAREFULLY!
// 1. This is a modified version of the original script. GEE made some changes to the Landsat 5
//    dataset that rendered previous code unusable. The changes can be summarised in:
//          a.  Use of the atmospherically corrected surface reflectance instead of TOA.
//          b.  Inclussion of a bit cloud mask instead of the Fmask algortihm used in the previous
//              TOA dataset.
// 1. Visualisation parameters for each layer can be adjusted in the Layers dialogue in the map
//    area of Goggle Earth Engine. This might be convenient when visualising at different scales.
// 2. To apply these analyses in other areas simply change the 'geometry' variable and the
//    'Map.setCenter' coordinates. These two parameters can be deleted. Doing so will apply the
//    algorithms in whatever area is being displayed in the Google Earth Engine's Map area.
//    However, if the geometry variable is eliminated it will need to be also deleted from the
//    scripts incorporating it (for example when it is employed to clip the analysis area).
//    The user can also draw his/her own polygon using the tool provided in the top left of Google
//    Earth Engine’s map window. This will create a polygon named ‘geometry’ by default. The user
//    can then delete the variable called ‘geometry’ in the code lines 52-65 and the analysis will
//    be performed in the newly defined area. Make sure the central coordinates defined by
//    'Map.setCenter' (lines 67-69) are also changed so the map window will zoom to these
//    coordinates when executing the scripts. 
// 3. The execution of the algorithms can take some time (particularly the PCAs). To shorten their
//    visualisation, select only those you require in the layers panel of the Map window.
// 4. The images resulting from these scripts can be transferred to your Google Drive running the
//    analysis from the 'task' tab on the top right of the screen.
// 5. All these algorithms can be run separately, however, there are variables employed by several
//    of those that only appear the first time that they are required and are not repeated in
//    subsequent algorithms. The reader is advised to check carefully which variables are employed
//    by each algorithm and to what part of the code they refer before attempting to run a single
//    algorithm separately from the rest of the code written here.


//                ------------- ooo -------------


// In the section below a set of variables defining (1) the collection of all Landsat 5 images available
// and filtering the clouds, (2) the Area of Interest (AOI) and (3) the central coordinate for visualisation
// will be defined for the use of the different algorithms

// JavaScript code to be implemented in Google Earth Engine(c)
// Updated to use Landsat Collection 2

// Set all the available Landsat 5 atmospherically corrected surface reflectance images as a variable
var L5_cloud = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');

// Function to mask clouds using QA_PIXEL band
var cloudMaskL457 = function(image) {
  var qa = image.select('QA_PIXEL');
  var cloud = qa.bitwiseAnd(1 << 4).or(qa.bitwiseAnd(1 << 5)); // Cloud and cloud shadow bits
  return image.updateMask(cloud.not());
};

var L5 = L5_cloud.map(cloudMaskL457);

// Define your AOI as a polygon with a set of WGS84 coordinates
var geometry = ee.Geometry.Polygon(
        [[[73.68325315225343, 29.269383778277344],
          [73.71730585121031, 31.259606185746645],
          [70.982131329259, 31.250194441370628],
          [70.98357975457634, 29.2594860285488]]]);

// Define a central point in your study area (as X, Y WGS84 decimal degrees) and a scale,
// just for visualization purposes
Map.setCenter(72.86335, 30.63028, 8);


// ---------------- NDVSI (Normalised Difference Vegetation Seasonality Index) ----------------

// Load a Landsat 5 collection (1984-2013) and select the bands of interest: SR_B3 (red) and SR_B4 (NIR)
var L5_NDVSI = L5.select(['SR_B3', 'SR_B4']);

// Select the L5 images corresponding to the wet months and average their values
var wet1 = L5_NDVSI.filter(ee.Filter.dayOfYear(1, 120)).mean();
var wet2 = L5_NDVSI.filter(ee.Filter.dayOfYear(181, 240)).mean();
var wet = wet1.add(wet2).divide(2);

// Develop a simple vegetation ratio for the wet months
var dvi_wet = wet.expression('b("SR_B4") / (b("SR_B4") + b("SR_B3"))');

// Select the L5 images corresponding to the dry months and average their values
var dry1 = L5_NDVSI.filter(ee.Filter.dayOfYear(121, 180)).mean();
var dry2 = L5_NDVSI.filter(ee.Filter.dayOfYear(241, 360)).mean();
var dry = dry1.add(dry2).divide(2);

// Develop a simple vegetation ratio for the dry months
var dvi_dry = dry.expression('b("SR_B4") / (b("SR_B4") + b("SR_B3"))');

// Develop the NDVSI and clip it using the AOI
var ndvsi = dvi_dry.subtract(dvi_wet).divide(dvi_dry.add(dvi_wet)).clip(geometry);

var ndvsi_palette =
    '011301, 011d01, 012e01, 023b01, 004c00, 056201, 207401, 3e8601, 529400,' +
    '66a000, 74a901, 99b718, fcd163, f1b555, df923d, ce7e45, 9d350e';

Map.addLayer(ndvsi, {min: -0.0705, max: 0.00408, palette: ndvsi_palette}, 'NDVSI');

Export.image.toDrive({
  image: ndvsi,
  description: 'NDVSI',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});


// ---------------- SMTVI (Seasonal Multi-Temporal Vegetation Indices) ----------------

// Import the image collection with all Landsat 5 EVI composites
var eviL5 = ee.ImageCollection('LANDSAT/COMPOSITES/C02/T1_L2_8DAY_EVI');

// Filter them by two-month periods and extract the average values
var eviL5_JanFeb = eviL5.filter(ee.Filter.dayOfYear(1, 60)).mean();
var eviL5_MarApr = eviL5.filter(ee.Filter.dayOfYear(61, 120)).mean();
var eviL5_MayJun = eviL5.filter(ee.Filter.dayOfYear(121, 180)).mean();
var eviL5_JulAug = eviL5.filter(ee.Filter.dayOfYear(181, 240)).mean();
var eviL5_SepOct = eviL5.filter(ee.Filter.dayOfYear(241, 300)).mean();
var eviL5_NovDec = eviL5.filter(ee.Filter.dayOfYear(301, 360)).mean();

// Create a composite image with all the two-month average EVI composites and clip the AOI
var composite = ee.Image([eviL5_JanFeb, eviL5_MarApr, eviL5_MayJun, eviL5_JulAug, eviL5_SepOct, eviL5_NovDec])
    .clip(geometry);

// Rename the composite bands so they can be easier to interpret
var SMTVI = composite.select(
    ['EVI', 'EVI_1', 'EVI_2', 'EVI_3', 'EVI_4', 'EVI_5'], // old names
    ['EVI_JanFeb', 'EVI_MarApr', 'EVI_MayJun', 'EVI_JulAug', 'EVI_SepOct', 'EVI_NovDec'] // new names
);

// Add the newly created layer to the map window
Map.addLayer(SMTVI, {bands: ['EVI_JulAug', 'EVI_MarApr', 'EVI_JanFeb'], min: 0.1, max: 0.5}, 'SMTVI');

// Export the SMTVI image to your Google Drive
Export.image.toDrive({
  image: SMTVI,
  description: 'SMTVI',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});

//                ------------- ooo -------------


// Wet Months Multi-Temporal Tasselled Cap Transformation

// Define an Array of Tasselled Cap coefficients.
var coefficients = ee.Array([
  [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
  [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
  [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],
  [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],
  [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],
  [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]
]);

// Load a Landsat 5 collection and select the bands of interest for Collection 2
var L5_bands = L5.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7']);

// Select the L5 images corresponding to the wet months, average their values and clip to AOI 
var L5_bands_Wet1 = L5_bands.filter(ee.Filter.dayOfYear(1, 120)).mean();
var L5_bands_Wet2 = L5_bands.filter(ee.Filter.dayOfYear(181, 240)).mean();
var L5_bands_Wet = L5_bands_Wet1.add(L5_bands_Wet2).divide(2).clip(geometry);

// Make an Array Image, with a 1-D Array per pixel.
var arrayImage1D_Wet = L5_bands_Wet.toArray();

// Make an Array Image with a 2-D Array per pixel, 6x1.
var arrayImage2D_Wet = arrayImage1D_Wet.toArray(1);

// Do a matrix multiplication: 6x6 times 6x1.
var TCT_LS5_Wet = ee.Image(coefficients)
  .matrixMultiply(arrayImage2D_Wet)
  .arrayProject([0]) // Get rid of the extra dimensions.
  .arrayFlatten([['brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']]);

// Display the first three bands of the result and the input imagery.
var vizTCTwet = {
  bands: ['brightness', 'greenness', 'wetness'],
  min: [2915.8, -35.067, -1376.2], max: [6010, 1612.2, 442.56]
};

// Add the resulting layer
Map.addLayer(TCT_LS5_Wet, vizTCTwet, 'TCT_LS5_Wet');

// Export the Multitemporal TCT of the wet months to your Google Drive
Export.image.toDrive({
  image: TCT_LS5_Wet,
  description: 'TCT_L5_Wet',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});


//                ------------- ooo -------------

// Dry Months Multi-Temporal Tasselled Cap Transformation

// Select the L5 images corresponding to the dry months, average their values and clip to AOI
var L5_bands_Dry1 = L5_bands.filter(ee.Filter.dayOfYear(121, 180)).mean();
var L5_bands_Dry2 = L5_bands.filter(ee.Filter.dayOfYear(241, 360)).mean();
var L5_bands_Dry = L5_bands_Dry1.add(L5_bands_Dry2).divide(2).clip(geometry);

// Make an Array Image, with a 1-D Array per pixel.
var arrayImage1D_Dry = L5_bands_Dry.toArray();

// Make an Array Image with a 2-D Array per pixel, 6x1.
var arrayImage2D_Dry = arrayImage1D_Dry.toArray(1);

// Do a matrix multiplication: 6x6 times 6x1.
var TCT_LS5_Dry = ee.Image(coefficients)
  .matrixMultiply(arrayImage2D_Dry)
  .arrayProject([0]) // Get rid of the extra dimensions.
  .arrayFlatten([['brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']]);

// Display the first three bands of the result and the input imagery.
var vizTCTdry = {
  bands: ['brightness', 'greenness', 'wetness'],
  min: [3259.5, -253.58, -1692.1], max: [6306.6, 1596.27, -342.66]
};

// Add the resulting layer
Map.addLayer(TCT_LS5_Dry, vizTCTdry, 'TCT_LS5_Dry');

// Export the Multitemporal TCT of the dry months to your Google Drive
Export.image.toDrive({
  image: TCT_LS5_Dry,
  description: 'TCT_L5_Dry',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});

//                ------------- ooo -------------

// Wet Months Multi-Temporal Principal Component Analysis

// NOTES!
// 1. The bands of interest from the Landsat 5 collection have already been selected in the
//    previous section
// 2. The filter of seasonal images has already been done in previous sections

// Get some information about the input to be used later.
var scale = L5_bands_Wet.projection().nominalScale();
var bandNames = L5_bands_Wet.bandNames();

// Mean center the data to enable a faster covariance reducer
// and an SD stretch of the principal components.
var meanDict = L5_bands_Wet.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: geometry,
    scale: scale,
    maxPixels: 1e9
});
var means = ee.Image.constant(meanDict.values(bandNames));
var centered = L5_bands_Wet.subtract(means);

// Helper function to generate new band names.
var getNewBandNames = function(prefix) {
  var seq = ee.List.sequence(1, bandNames.length());
  return seq.map(function(b) {
    return ee.String(prefix).cat(ee.Number(b).int());
  });
};

// Function to compute Principal Components (PC) for an image.
var getPrincipalComponents = function(centered, scale, geometry) {
  var arrays = centered.toArray();
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: geometry,
    scale: scale,
    maxPixels: 1e9
  });

  var covarArray = ee.Array(covar.get('array'));
  var eigens = covarArray.eigen();
  var eigenValues = eigens.slice(1, 0, 1);
  var eigenVectors = eigens.slice(1, 1);

  var arrayImage = arrays.toArray(1);
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

  var sdImage = ee.Image(eigenValues.sqrt())
    .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

  return principalComponents
    .arrayProject([0])
    .arrayFlatten([getNewBandNames('pc')])
    .divide(sdImage);
};

// Compute the PCs for wet months.
var pcaL5wet = getPrincipalComponents(centered, scale, geometry);

// Define visualization parameters.
var vizPCAwet = {
  bands: ['pc2', 'pc4', 'pc1'],
  min: [-3.2339],
  max: [3.2845]
};

// Display the PCA composite for wet months.
Map.addLayer(pcaL5wet, vizPCAwet, 'PCA_composite_(2,4,1)_Wet');

Export.image.toDrive({
  image: pcaL5wet,
  description: 'PCA_L5_Wet',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});

//                ------------- ooo -------------

// Dry Months Multi-Temporal Principal Component Analysis

// NOTES!
// 1. The bands of interest from the Landsat 5 collection have already been selected in the
//    previous section
// 2. The filter of seasonal images has already been done in previous sections
// 3. Region, scale, and bandNames variables have already been created in the previous section

// Mean center the data for dry months.
var meanDict_Dry = L5_bands_Dry.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: geometry,
    scale: scale,
    maxPixels: 1e9
});
var means_Dry = ee.Image.constant(meanDict_Dry.values(bandNames));
var centered_Dry = L5_bands_Dry.subtract(means_Dry);

// Compute the PCs for dry months using the same helper function.
var pcaL5dry = getPrincipalComponents(centered_Dry, scale, geometry);

// Define visualization parameters.
var vizPCAdry = {
  bands: ['pc2', 'pc4', 'pc1'],
  min: [-2.2689],
  max: [2.3412]
};

// Display the PCA composite for dry months.
Map.addLayer(pcaL5dry, vizPCAdry, 'PCA_composite_(2,4,1)_Dry');

Export.image.toDrive({
  image: pcaL5dry,
  description: 'PCA_L5_Dry',
  scale: 30,
  maxPixels: 1e9,
  region: geometry
});



